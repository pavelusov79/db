/* база данных на примере интернет-магазина www.alltime.ru
 для курсовой взяты не все разделы каталога магазина и не все
 фильтры. Взяты только разделы касательно часов.*/

drop database if exists alltime;
create database alltime;
use alltime;

-- создаем таблицу к разделам интернет магазина
drop table if exists catalogs;
create table catalogs(
	id serial primary key,
	name varchar(100)
);

-- вставляем названия разделов
insert catalogs(name) values
('наручные часы'),
('премиум часы'),
('украшения'),
('подарки'),
('аксессуары'),
('бренды'),
('личный кабинет'),
('корзина');

-- создаем таблицу города, где есть розничные точки интернет-магазина
drop table if exists cities;
create table cities(
	id serial primary key,
	city_name varchar(100),
	index index_city(city_name)
);

-- заполняем таблицу городами
insert cities(city_name) values
('Москва'),
('Краснодар'),
('Казань'),
('Воронеж'),
('Челябинск'),
('Мурманск'),
('Нижний Новгород'),
('Екатеринбург'),
('Уфа'),
('Санкт-Петербург'),
('Новосибирск'),
('Самара'),
('Ростов-на-Дону');

-- создаем таблицу адреса магазинов
drop table if exists city_address;
create table city_address (
	id serial primary key,
	city_id bigint unsigned not null,
	address varchar(255),
	tel bigint not null,
	email varchar(50),
	foreign key(city_id) references cities(id)
);

-- заполняем таблицу с адресами магазинов
insert city_address(city_id, address, tel, email) values
(1, 'ул.Большая Дорогомиловская д.1', '84959026379', 'zakaz-shop@alltime.ru'),
(1, 'ул. Сретенка д.9', '84959026375', 'zakaz-kg@alltime.ru'),
(1, 'ул. Петровский Бульвар д.21', '84959025475', 'zakaz-gallery@alltime.ru'),
(2, 'ул. Чапаева д.90', '88612055455', 'zakaz-krr@alltime.ru'),
(3, 'ул. Пушкина д.3', '88432922314', 'zakaz-kzn@alltime.ru'),
(4, 'пр. Ркволюции д.53', '84732022140', 'zakaz-voronezh@alltime.ru'),
(5, 'пр. Ленина д.62', '83512149691', 'zakaz-chelyabinsk@alltime.ru'),
(6, 'пр. Ленина д.61', '88152624532', 'zakaz-mrk@alltime.ru'),
(7, 'ул. Большая Покровская д.61', '88314333878', 'zakaz-nn@alltime.ru'),
(8, 'ул. Свердлова д.11', '83432277057', 'zakaz-ekb@alltime.ru'),
(9, 'ул. 50-летия Октября д.18', '83472254777', 'zakaz-ufa@alltime.ru'),
(10, 'ул. Садова д.38', '88124263175', 'spbzakaz@alltime.ru'),
(11, 'Красный проспект д.78', '83832049350', 'zakaz-nsk@alltime.ru'),
(12, 'ул. Куйбышева д.100', '88462001668', 'zakaz-samara@alltime.ru'),
(13, 'ул. Большая Садовая д.89', '88633034375', 'rostov-zakaz@alltime.ru');

-- создаем вспомогательные таблицы моделей наручных часов
-- создаем таблицу категории наручных часов
drop table if exists watch_category;
create table watch_category(
	id serial primary key,
	cat_name varchar(100)
);

-- заполняем таблицу категорий
insert watch_category(cat_name) values
('мужские'),
('женские'),
('детские');

-- создаем таблицу стиль часов
drop table if exists watch_style;
create table watch_style(
	id serial primary key,
	style_name varchar(100)
);

-- заполняем таблицу стиль часов
insert watch_style(style_name) values
('Военные'),
('Дизайнерские'),
('Милитари'),
('На каждый день'),
('Пилотские'),
('Под костюм'),
('Спортивные');

-- создаем таблицу брэндов часов
drop table if exists brands;
create table brands(
	id serial primary key,
	brand_name varchar(100),
	index(brand_name)
);

-- заполняем таблицу брэндами
insert brands(brand_name) values
('Orient'),
('Casio'),
('Emporio Armani'),
('Wainer'),
('Seiko'),
('Traser'),
('Sokolov'),
('G-Shock'),
('Fossil'),
('Epos'),
('Ball'),
('Слава'),
('Молния'),
('Wenger'),
('Swiss military'),
('TAG Hkuer'),
('Faimond weil'),
('Diesel'),
('Fesstina'),
('DKNY'),
('Citizen'),
('Calvin Klein'),
('Boccia Titanium'),
('Ben Sherman'),
('AM:PM'),
('Adriatica'),
('Bering'),
('Guess'),
('Jacques Lemans'),
('Lee Cooper'),
('Michael Kors'),
('Oris'),
('Pierre Rikaud'),
('Romanson'),
('Royal London'),
('Skagen'),
('Timberland'),
('Ника'),
('Победа'),
('Ракета'),
('Спецназ'),
('Штурманские');

-- создаем таблицу страна происхождения
drop table if exists country_of_origin;
create table country_of_origin(
	id serial primary key,
	country_name varchar(100),
	index(country_name)
);

-- заполняем таблицу странами
insert country_of_origin(country_name) values
('Швейцария'),
('Япония'),
('Россия'),
('Германия'),
('Австрия'),
('Беларусь'),
('Великобритания'),
('Гонконг'),
('Дания'),
('Испания'),
('Италия'),
('Канада'),
('Китай'),
('Нидерланды'),
('США'),
('Турция'),
('Финляндия'),
('Швеция'),
('Южная Корея');

-- создаем таблицу с типами механизма часов
drop table if exists mehanizm_type;
create table mehanizm_type(
	id serial primary key,
	name_of_meh varchar(100)
);

-- заполняем таблицу с типами механизма часов
insert mehanizm_type(name_of_meh) values
('механические'),
('с ручным заводом'),
('с автоподзоводом'),
('кварцевые'),
('солнечная батарея'),
('автокварц(кинетик)'),
('электронные');

-- создаем таблицу материал корпуса часов
drop table if exists watch_case;
create table watch_case(
	id serial primary key,
	case_name varchar(100)
);

-- заполняем таблицу материал корпуса часов
insert watch_case(case_name) values
('сталь'),
('металлический'),
('титан'),
('алюминий'),
('карбон'),
('пластик');

-- создаем  таблицу ремешков часов
drop table if exists watch_strap;
create table watch_strap(
	id serial primary key,
	strap_name varchar(100)
);

-- заполняем таблицу ремешков
insert watch_strap(strap_name) values
('металлический браслет'),
('ремешок из резины'),
('пластиковый ремешок'),
('ремешок каучуковый'),
('кожанный ремешок'),
('текстильный ремешок');

-- создаем основную таблицу с моделями часов наручных и премиум часов
drop table if exists watches;
create table watches(
	id serial primary key,
	name varchar(100) comment 'модель часов',
	price int,
	catalogs_id bigint unsigned,
	cat_id bigint unsigned,
	style_id bigint unsigned,
	brand_id bigint unsigned,
	country_id bigint unsigned,
	type_id bigint unsigned,
	case_id bigint unsigned,
	strap_id bigint unsigned,
	created_at datetime default now(),
	updated_at datetime default now() on update now(),
	foreign key(catalogs_id) references catalogs(id),
	foreign key(cat_id) references watch_category(id),
	foreign key(style_id) references watch_style(id),
	foreign key(brand_id) references brands(id),
	foreign key(country_id) references country_of_origin(id),
	foreign key(type_id) references mehanizm_type(id),
	foreign key(case_id) references watch_case(id),
	foreign key(strap_id) references watch_strap(id),
	index (price),
	index model_watch (name)
);

-- вставляем модели часов в таблицу watches
insert watches(name, price, catalogs_id, cat_id, style_id, brand_id, country_id, 
type_id, case_id, strap_id) values
('NY2342', 23000, 1, 1, 5, 36, 14, 5, 4, 6),
('NS44CHSP.0098.3', 17600, 1, 1, 3, 21, 3, 4, 3, 5),
('EFR-5541.022-3', 24300, 1, 2, 6, 34, 15, 5, 4, 6),
('SS-0021', 11200, 1, 2, 3, 23, 11, 3, 3, 3),
('AA-00219-F5', 8900, 1, 1, 5, 1, 12, 4, 5, 1),
('123.45-OO', 7600, 1, 2, 6, 22, 1, 4, 1, 1),
('K-09.SS', 28000, 1, 1, 3, 40, 9, 7, 3, 6),
('MDA -01-22', 15400, 1, 2, 7, 4, 16, 2, 2, 2),
('123.MN.005', 31000, 1, 2, 6, 7, 2, 5, 3, 6),
('QQ123.09-5', 11900, 1, 1, 1, 1, 1, 1, 3, 3),
('QWA-00931', 8600, 1, 2, 4, 36, 14, 6, 2, 1),
('126-65-AS', 7800, 1, 1, 2, 19, 2, 1, 2, 3),
('ZZZ-01-00001', 12400, 1, 2, 5, 3, 15, 1, 2, 6),
('qs/0002-xxc', 13700, 1, 2, 4, 20, 8, 7, 4, 4),
('khgk-8881', 20600, 1, 1, 2, 23, 4, 2, 6, 1),
('GAX-901200.0001', 19900, 1, 2, 4, 33, 13, 7, 2, 4),
('KJL-004111-09', 16700, 1, 2, 6, 38, 15, 5, 5, 5),
('DBN-9999-01', 14300, 1, 1, 3, 3, 2, 3, 3, 4),
('A-09-AS-01', 11800, 1, 2, 7, 25, 4, 5, 6, 6),
('STV-00984-OO', 16100, 1, 1, 3, 39, 14, 1, 2, 3),
('IK01-TTR-7', 8800, 1, 2, 6, 17, 4, 5, 2, 5),
('NZ-2311', 9300, 1, 1, 5, 33, 15, 5, 4, 6),
('N-44CHSP-0098', 12100, 1, 1, 2, 23, 3, 4, 3, 1),
('EF-5541-072-3', 15900, 1, 2, 6, 38, 7, 5, 4, 6),
('S-0022', 25900, 1, 2, 3, 1, 17, 1, 3, 3),
('AA-222-F4', 20100, 1, 1, 5, 34, 7, 4, 5, 1),
('005.45-OO', 22200, 1, 2, 7, 22, 8, 4, 1, 1),
('K-09.SA', 19890, 1, 1, 3, 16, 10, 6, 3, 6),
('MD -01-22', 12940, 1, 1, 6, 33, 2, 2, 2, 2),
('128.MN.005', 3990, 1, 3, 6, 7, 2, 5, 3, 6),
('Q-123.09-5', 5600, 1, 3, 1, 1, 1, 1, 3, 3),
('QW-0093122', 4900, 1, 3, 4, 36, 14, 6, 2, 1),
('12-65-AS', 8100, 1, 1, 3, 14, 2, 1, 2, 3),
('ZZ-01-00001', 10200, 1, 2, 6, 3, 15, 1, 2, 6),
('qs-002-xxa', 28300, 1, 2, 3, 12, 3, 7, 4, 4),
('khaak-8881', 18000, 1, 1, 2, 24, 4, 2, 6, 1),
('GAX-901200', 16000, 1, 1, 4, 36, 11, 7, 2, 4),
('KJ-004111-09', 23200, 1, 2, 6, 21, 15, 5, 5, 5),
('DBN-9999-045', 18500, 1, 1, 3, 13, 2, 3, 3, 4),
('A234-AS-01', 10390, 1, 2, 4, 22, 14, 5, 6, 3),
('ST-00984-OO-01', 24600, 1, 1, 3, 40, 8, 6, 5, 3),
('IK-TTR-7', 6500, 1, 3, 6, 16, 6, 5, 2, 5),
('MY239-1', 9000, 1, 1, 3, 28, 17, 4, 4, 4),
('MS44DDHSP-6', 15900, 1, 1, 6, 9, 6, 3, 4, 3),
('AFR-5541.066', 28300, 1, 2, 6, 30, 15, 5, 4, 6),
('SSXX-002122', 24900, 1, 1, 3, 5, 10, 3, 3, 3),
('AALM-00219-DD5', 14000, 1, 1, 6, 19, 7, 4, 5, 1),
('LL-123.45', 32000, 1, 2, 5, 19, 4, 4, 2, 1),
('KLLM-09.ZZA', 26000, 1, 1, 3, 38, 9, 6, 6, 6),
('MD123-01-22', 28900, 1, 2, 7, 24, 3, 3, 2, 2),
('128.MKL.005', 19000, 1, 2, 5, 6, 12, 5, 3, 6),
('QQLMSS-0010', 5400, 1, 3, 1, 11, 11, 3, 3, 3),
('PPWA-00931', 15200, 1, 2, 5, 37, 16, 6, 2, 1),
('AB126-65', 12800, 1, 1, 2, 20, 12, 1, 2, 3),
('ZQQ-01-00012', 13200, 1, 2, 4, 13, 5, 1, 2, 6),
('qs-0112-axc', 16400, 1, 2, 5, 21, 1, 7, 4, 4),
('LLL-888.5555', 21000, 1, 1, 6, 2, 7, 2, 6, 6),
('GX-900.0001', 26000, 1, 2, 5, 31, 1, 7, 2, 4),
('JL-4111-109', 24200, 1, 1, 6, 22, 5, 5, 5, 5),
('N-199-11', 20900, 1, 1, 3, 23, 2, 3, 3, 4),
('A-AS-201', 18500, 1, 2, 1, 24, 11, 6, 6, 6),
('V-11984-OO', 6100, 1, 3, 3, 30, 4, 7, 2, 3),
('II01-TR-2', 8600, 1, 2, 6, 1, 14, 4, 2, 5),
('YY2342', 27700, 1, 2, 5, 27, 3, 6, 4, 6),
('44-CHSP.983', 23000, 1, 1, 5, 8, 13, 4, 4, 5),
('R-5545-2-3', 24600, 1, 2, 5, 4, 8, 5, 4, 6),
('TS-021', 20800, 1, 2, 3, 24, 15, 4, 3, 3),
('F-00219-5', 14100, 1, 1, 5, 11, 2, 4, 5, 1),
('JKO-45-OO', 12500, 1, 2, 6, 2, 1, 4, 1, 1),
('KM-012.SS', 15600, 1, 1, 3, 37, 9, 5, 3, 6),
('MD-021-28', 9900, 1, 2, 6, 14, 17, 2, 2, 2),
('XZ-015', 25200, 1, 2, 6, 17, 3, 5, 3, 6),
('Q-13.19-S5', 29000, 1,  1, 1, 11, 11, 1, 3, 3),
('QW-Z0091', 25100, 1, 2, 4, 6, 14, 6, 2, 1),
('fkjfk-65-AS', 15900, 1, 1, 2, 9, 2, 2, 2, 3),
('VCB-1-1001', 9200, 1, 2, 5, 24, 7, 1, 2, 6),
('qs-00.02-9', 8200, 1, 2, 4, 10, 9, 7, 4, 4),
('kk-881-oop', 7800, 1, 1, 2, 4, 9, 2, 5, 5),
('X-601204', 6950, 1, 3, 7, 3, 3, 7, 2, 4),
('JL-004122', 10000, 1, 2, 6, 8, 15, 6, 5, 5),
('WQBN-8899-01', 9900, 1, 1, 3, 23, 12, 3, 3, 4),
('ASR-10-AS-01', 14800, 1, 2, 7, 24, 14, 5, 6, 6),
('STAA-084-OA', 29300, 1, 1, 3, 36, 8, 6, 2, 3),
('I-101-R-765', 22000, 1, 2, 6, 16, 1, 4, 2, 5),
('N-2311.op', 12900, 1, 1, 5, 3, 8, 6, 6, 6),
('N-46SP-98', 15700, 1, 1, 5, 28, 13, 4, 3, 1),
('5541-072-3', 17000, 1, 2, 6, 37, 7, 4, 4, 6),
('S-02-LL', 15600, 1, 2, 3, 11, 18, 1, 3, 3),
('AA-333-F4', 17800, 1, 1, 3, 34, 7, 4, 4, 3),
('005.5-GJHOO', 10500, 1, 2, 7, 2, 9, 4, 1, 3),
('AS-11.SA', 13500, 1, 1, 3, 16, 10, 3, 3, 4),
('TRAC-01-52', 8800, 1, 1, 6, 33, 2, 2, 2, 3),
('18.VC.005', 4300, 1, 3, 5, 40, 5, 6, 3, 6),
('AXQ-13.09', 6900, 1, 3, 3, 3, 3, 3, 3, 3),
('W-0031522', 8100, 1, 3, 4, 27, 12, 6, 2, 1),
('HG-12-65-S', 16300, 1, 1, 3, 13, 4, 4, 2, 3),
('AVC-01-04001', 15200, 1, 2, 4, 33, 14, 4, 4, 4),
('gfs-002-xa', 14000, 1, 2, 3, 6, 18, 6, 5, 4),
('khe-83e81', 14300, 1, 1, 2, 25, 14, 2, 5, 2),
('X-q001200', 15200, 1, 1, 4, 36, 16, 3, 2, 4),
('JJJ-0041-09', 15600, 1, 2, 6, 20, 17, 5, 5, 5),
('DNMB-77799-045', 16900, 1, 1, 4, 14, 12, 3, 3, 4),
('AFG234-AS-01', 17300, 1, 2, 4, 26, 4, 5, 4, 3),
('STRT-11984-OO', 18000, 1, 1, 3, 39, 17, 2, 5, 3),
('IK-R-72S', 5000, 1, 3, 6, 16, 5, 5, 4, 5),
('LJH-239-102', 7800, 1, 1, 3, 26, 7, 3, 3, 3),
('DDHSP-61123', 9000, 1, 1, 5, 29, 16, 7, 4, 3),
('RFD-2541.066', 18700, 1, 2, 6, 30, 14, 4, 2, 6),
('SXZ-012122', 12000, 1, 1, 3, 15, 9, 3, 5, 3),
('AAM-05519-D5', 10100, 1, 1, 5, 18, 6, 4, 5, 3),
('LWREQ-123.45', 9900, 1, 2, 5, 13, 14, 4, 2, 2),
('KL45-12.Z', 30000, 1, 1, 3, 28, 13, 1, 6, 6),
('MCVD-123-01-SSA', 31000, 1, 2, 7, 25, 13, 3, 2, 2),
('228.MKL-0091', 20700, 1, 2, 5, 6, 11, 5, 3, 6),
('QLMSS-ZX-10', 7000, 1, 3, 1, 11, 15, 2, 2, 3),
('PA-031-SS', 28000, 1, 2, 5, 27, 14, 6, 2, 2),
('126-65-QWERT', 24000, 1, 1, 2, 10, 10, 5, 2, 3),
('ZRQ-1111-00012', 24400, 1, 2, 4, 13, 5, 1, 2, 6),
('QSD-312-xxc', 22000, 1, 2, 5, 19, 11, 4, 4, 4),
('LSDTY-88', 21000, 1, 1, 6, 2, 7, 2, 5, 6),
('G0-111-0001', 23000, 1, 2, 3, 33, 4, 5, 2, 4),
('JL-uu11-pyu', 13700, 1, 1, 4, 2, 5, 4, 5, 5),
('NYT-139-zz', 12000, 1, 1, 5, 34, 6, 5, 3, 4),
('ARE-AS-202', 12400, 1, 2, 1, 26, 13, 5, 6, 6),
('VSW-11984', 5400, 1, 3, 3, 20, 3, 3, 2, 3),
('I01-TRFF-2', 9000, 1, 2, 6, 11, 14, 5, 2, 5),
('PRY1242', 103000, 2, 1, 6, 36, 1, 3, 3, 5),
('PS44CHSP-00102', 176000, 2, 2, 6, 21, 1, 3, 3, 1),
('PREFR-5588-022-3', 243000, 2, 2, 6, 34, 5, 3, 3, 1),
('PSS-1121', 212000, 2, 2, 3, 23, 1, 3, 3, 5),
('PRA-11219-F', 389000, 2, 1, 6, 5, 5, 3, 3, 1),
('P823.555-OO', 276000, 2, 2, 6, 22, 1, 3, 3, 1),
('PRK-109.SS', 280000, 2, 1, 6, 40, 5, 3, 3, 5),
('PMD-S01-22', 254000, 2, 2, 6, 4, 1, 3, 3, 5),
('PRS623-005', 310000, 2, 2, 6, 7, 5, 3, 3, 1),
('PQ1023.S09', 119000, 2, 1, 7, 16, 5, 3, 3, 3),
('PRQA-AA936', 186000, 2, 2, 6, 36, 1, 3, 3, 1),
('PA6-SS65-S', 278000, 2, 1, 6, 19, 5, 3, 3, 1),
('PRZ-QQ1-201', 154000, 2, 2, 6, 3, 5, 3, 3, 5),
('pqs006-zzz', 187000, 2, 2, 6, 20, 1, 3, 3, 1),
('prl-2280', 206000, 2, 1, 6, 23, 1, 3, 6, 1),
('PA-PA20', 199000, 2, 2, 6, 33, 1, 7, 2, 4),
('PRJL-2111-PP', 167000, 2, 2, 6, 38, 5, 5, 5, 5),
('PBN-DD99-04', 143000, 2, 1, 3, 3, 2, 3, 3, 4),
('PRA-AA09-AS', 218000, 2, 2, 6, 25, 5, 5, 6, 6),
('PSV-LL984', 261000, 2, 1, 3, 39, 14, 1, 2, 3),
('PRIK-11TTR', 388000, 2, 2, 6, 17, 1, 5, 2, 5),
('PNZ-OO11', 293000, 2, 1, 4, 33, 15, 5, 4, 6),
('PNN-CHSP-2298', 191000, 2, 1, 2, 23, 3, 4, 3, 1),
('PRE-PP55-07', 159000, 2, 2, 6, 38, 7, 5, 4, 6),
('PS-HH-02', 259000, 2, 2, 3, 1, 18, 1, 3, 3),
('PPA-522-F8', 201000, 2, 1, 5, 34, 7, 4, 5, 1),
('PR5.55-QQ', 222000, 2, 2, 7, 30, 8, 4, 1, 1),
('POK-109.S09', 198900, 2, 1, 3, 16, 10, 6, 3, 6),
('PRMD -TT01', 199400, 2, 1, 6, 33, 2, 2, 2, 2),
('PR8.NNN.105', 399000, 2, 3, 6, 7, 2, 5, 3, 6),
('PJQ-3333.05', 406000, 2, 3, 1, 1, 1, 1, 3, 3),
('PQW-3122-III', 349000, 2, 3, 4, 26, 14, 6, 2, 1);

-- создаем таблицу скидки
drop table if exists discounts;
create table discounts(
	id serial primary key,
	model_id bigint unsigned unique,
	discount int default 20 comment 'размер скидки %',
	started_at datetime default now() comment 'начало 
	действия скидки',
	finished_at datetime default null comment 'завершение акции скидок',
	foreign key(model_id) references watches(id),
	index (finished_at)
);
-- заполняем таблицу discounts
insert discounts (model_id, discount, started_at, finished_at) values
(1, 20, '2020-03-06', null),
(3, 15, '2020-02-06', null),
(5, 15, '2020-03-05', '2020-03-15'),
(9, 23, '2020-03-06', null),
(22, 20, '2020-02-07', '2020-03-15'),
(27, 25, '2020-03-15', null),
(30, 15, '2020-01-30', '2020-02-28'),
(33, 15, '2020-01-30', '2020-02-25');


-- создаем таблицу наличие товара в магазинах
drop table if exists stocks;
create table stocks(
	id serial primary key,
	model_id bigint unsigned not null,
	city_id bigint unsigned, 
	quantity int,
	`date` datetime default now(),
	foreign key(model_id) references watches(id),
	foreign key(city_id) references city_address(id),
	index(quantity)
);

-- заполняем таблицу наличие товара в магазинах
insert stocks(model_id, city_id, quantity, `date`) values
(1, 1, 2, '2020-02-01'),
(2, 1, 3, '2020-03-05'),
(3, 1, 1, '2020-03-13'),
(4, 1, 1, '2020-01-01'),
(5, 1, 2, '2020-02-01'),
(6, 1, 1, '2020-02-11'),
(7, 1, 1, '2020-02-13'),
(8, 1, 1, '2020-01-16'),
(9, 1, 4, '2020-03-01'),
(10, 1, 1, '2020-02-01'),
(11, 1, 2, '2020-02-23'),
(12, 1, 3, '2020-02-23'),
(13, 1, 1, '2020-02-12'),
(14, 1, 1, '2020-03-16'),
(15, 1, 1, '2020-02-22'),
(17, 1, 1, '2020-02-01'),
(20, 1, 2, '2020-03-01'),
(21, 1, 1, '2020-03-14'),
(23, 1, 1, '2020-01-11'),
(26, 1, 2, '2020-01-01'),
(27, 1, 1, '2020-01-01'),
(33, 1, 1, '2020-01-01'),
(35, 1, 2, '2020-01-01'),
(36, 1, 1, '2020-02-01'),
(37, 1, 1, '2020-02-01'),
(41, 1, 1, '2020-02-22'),
(42, 1, 2, '2020-02-22'),
(43, 2, 5, '2020-02-22'),
(44, 2, 1, '2020-02-22'),
(45, 2, 2, '2020-02-01'),
(47, 2, 2, '2020-02-01'),
(48, 2, 1, '2020-02-10'),
(50, 2, 1, '2020-02-11'),
(51, 2, 2, '2020-02-11'),
(53, 2, 1, '2020-02-11'),
(55, 2, 2, '2020-02-11'),
(56, 2, 1, '2020-02-11'),
(57, 2, 1, '2020-02-11'),
(58, 2, 1, '2020-02-10'),
(59, 2, 1, '2020-02-01'),
(60, 2, 1, '2020-02-10'),
(61, 2, 1, '2020-02-10'),
(62, 2, 1, '2020-02-10'),
(64, 2, 2, '2020-02-10'),
(65, 2, 1, '2020-02-10'),
(67, 2, 1, '2020-02-10'),
(69, 2, 1, '2020-02-10'),
(70, 2, 1, '2020-02-10'),
(128, 2, 1, '2020-02-10'),
(129, 2, 1, '2020-02-10'),
(130, 2, 1, '2020-02-10'),
(131, 3, 1, '2020-02-10'),
(132, 3, 1, '2020-02-10'),
(133, 3, 1, '2020-02-20'),
(134, 3, 1, '2020-02-20'),
(135, 3, 1, '2020-02-20'),
(138, 3, 1, '2020-02-20'),
(139, 3, 2, '2020-02-20'),
(141, 3, 1, '2020-02-20'),
(142, 3, 2, '2020-02-20'),
(143, 3, 2, '2020-02-20'),
(88, 3, 1, '2020-02-20'),
(89, 3, 1, '2020-02-20'),
(90, 3, 1, '2020-02-20'),
(91, 3, 1, '2020-02-20'),
(92, 3, 1, '2020-02-20'),
(93, 3, 1, '2020-02-20'),
(94, 3, 1, '2020-02-20'),
(95, 3, 1, '2020-02-20'),
(96, 4, 2, '2020-02-20'),
(97, 4, 1, '2020-02-20'),
(98, 4, 1, '2020-02-20'),
(99, 4, 1, '2020-02-20'),
(100, 4, 2, '2020-02-20'),
(101, 4, 1, '2020-02-20'),
(145, 4, 1, '2020-02-20'),
(146, 4, 1, '2020-02-20'),
(147, 4, 1, '2020-03-20'),
(1, 4, 1, '2020-03-20'),
(2, 4, 2, '2020-03-20'),
(3, 4, 1, '2020-03-20'),
(4, 4, 1, '2020-03-20'),
(22, 4, 1, '2020-03-20'),
(23, 4, 1, '2020-03-20'),
(24, 4, 1, '2020-03-20'),
(25, 4, 2, '2020-03-20'),
(35, 4, 1, '2020-03-20'),
(36, 4, 1, '2020-03-20'),
(37, 4, 2, '2020-03-20'),
(38, 4, 1, '2020-03-20'),
(50, 4, 1, '2020-03-20'),
(51, 4, 2, '2020-03-20'),
(52, 4, 1, '2020-03-20'),
(53, 5, 1, '2020-03-20'),
(55, 5, 1, '2020-03-20'),
(100, 5, 2, '2020-03-20'),
(101, 5, 1, '2020-03-20'),
(102, 5, 1, '2020-03-20'),
(103, 5, 3, '2020-02-14'),
(104, 5, 3, '2020-02-14'),
(105, 5, 4, '2020-02-14'),
(106, 5, 3, '2020-03-14'),
(107, 5, 2, '2020-03-14'),
(108, 5, 1, '2020-03-14'),
(109, 5, 3, '2020-03-14'),
(110, 5, 1, '2020-03-14'),
(111, 5, 3, '2020-01-14'),
(112, 5, 1, '2020-03-14'),
(113, 5, 1, '2020-03-14'),
(114, 5, 1, '2020-03-14'),
(115, 5, 5, '2020-03-14'),
(116, 5, 2, '2020-03-14'),
(117, 6, 2, '2020-03-14'),
(118, 6, 1, '2020-03-14'),
(119, 6, 1, '2020-03-14'),
(120, 6, 3, '2020-03-14'),
(121, 6, 1, '2020-01-15'),
(122, 6, 1, '2020-01-15'),
(123, 6, 1, '2020-01-15'),
(124, 6, 1, '2020-01-15'),
(125, 6, 1, '2020-01-15'),
(126, 6, 1, '2020-01-15'),
(127, 6, 3, '2020-01-15'),
(128, 6, 1, '2020-01-15'),
(129, 6, 1, '2020-01-15'),
(130, 6, 1, '2020-01-15'),
(131, 6, 2, '2020-01-15'),
(132, 6, 1, '2020-01-15'),
(80, 6, 2, '2020-01-15'),
(81, 6, 2, '2020-01-15'),
(82, 6, 1, '2020-01-15'),
(83, 6, 1, '2020-01-15'),
(84, 6, 1, '2020-01-15'),
(86, 6, 1, '2020-01-15'),
(87, 6, 1, '2020-01-15'),
(88, 6, 1, '2020-01-15'),
(89, 6, 1, '2020-01-15'),
(90, 6, 1, '2020-01-15'),
(40, 7, 2, '2020-02-19'),
(41, 7, 1, '2020-02-19'),
(42, 7, 1, '2020-02-19'),
(43, 7, 1, '2020-02-19'),
(44, 7, 2, '2020-02-19'),
(45, 7, 1, '2020-02-19'),
(46, 7, 3, '2020-02-19'),
(47, 7, 3, '2020-02-19'),
(48, 7, 3, '2020-02-19'),
(49, 7, 1, '2020-02-19'),
(50, 7, 3, '2020-02-19'),
(51, 7, 1, '2020-02-19'),
(52, 7, 1, '2020-02-19'),
(53, 7, 1, '2020-02-19'),
(54, 7, 1, '2020-02-19'),
(55, 7, 1, '2020-02-19'),
(56, 7, 2, '2020-02-19'),
(57, 7, 1, '2020-02-19'),
(58, 7, 1, '2020-02-19'),
(59, 7, 2, '2020-02-19'),
(20, 7, 1, '2020-02-19'),
(21, 7, 1, '2020-02-19'),
(23, 7, 2, '2020-02-19'),
(25, 7, 1, '2020-02-19'),
(26, 7, 1, '2020-02-19'),
(27, 7, 1, '2020-02-19'),
(11, 7, 2, '2020-02-19'),
(12, 8, 1, '2020-02-19'),
(22, 8, 1, '2020-02-19'),
(23, 8, 2, '2020-02-19'),
(24, 8, 2, '2020-02-19'),
(25, 8, 3, '2020-02-19'),
(26, 8, 1, '2020-02-19'),
(27, 8, 2, '2020-02-19'),
(28, 8, 1, '2020-02-19'),
(29, 8, 2, '2020-02-19'),
(20, 8, 1, '2020-02-19'),
(32, 8, 1, '2020-02-19'),
(34, 8, 1, '2020-02-19'),
(35, 8, 1, '2020-02-19'),
(38, 8, 1, '2020-02-19'),
(39, 8, 1, '2020-02-19'),
(140, 8, 1, '2020-02-19'),
(141, 8, 2, '2020-02-19'),
(142, 8, 1, '2020-02-19'),
(143, 8, 1, '2020-02-19'),
(144, 8, 1, '2020-02-19'),
(145, 8, 1, '2020-02-19'),
(146, 8, 1, '2020-02-19'),
(100, 8, 1, '2020-02-19'),
(101, 8, 1, '2020-02-19'),
(102, 9, 1, '2020-03-23'),
(103, 9, 3, '2020-03-23'),
(104, 9, 1, '2020-03-23'),
(105, 9, 1, '2020-03-23'),
(106, 9, 2, '2020-03-23'),
(107, 9, 3, '2020-03-23'),
(108, 9, 2, '2020-03-23'),
(109, 9, 1, '2020-03-23'),
(110, 9, 2, '2020-03-23'),
(111, 9, 2, '2020-03-23'),
(120, 9, 1, '2020-03-23'),
(121, 9, 1, '2020-03-23'),
(122, 9, 1, '2020-03-23'),
(123, 9, 1, '2020-03-23'),
(124, 9, 1, '2020-03-23'),
(125, 9, 1, '2020-03-23'),
(126, 9, 1, '2020-03-23'),
(127, 9, 1, '2020-03-23'),
(128, 10, 2, '2020-03-23'),
(129, 10, 1, '2020-03-23'),
(130, 10, 1, '2020-03-23'),
(131, 10, 3, '2020-03-23'),
(132, 10, 2, '2020-03-23'),
(133, 10, 1, '2020-03-23'),
(134, 10, 1, '2020-03-23'),
(135, 10, 1, '2020-03-23'),
(136, 10, 1, '2020-03-23'),
(137, 10, 4, '2020-02-23'),
(138, 10, 2, '2020-03-23'),
(139, 10, 1, '2020-03-23'),
(140, 10, 1, '2020-03-23'),
(141, 10, 1, '2020-03-23'),
(142, 10, 1, '2020-03-23'),
(143, 10, 1, '2020-03-23'),
(144, 10, 2, '2020-03-23'),
(145, 10, 1, '2020-03-23'),
(146, 10, 1, '2020-03-23'),
(147, 10, 2, '2020-03-23'),
(2, 10, 1, '2020-03-23'),
(3, 10, 1, '2020-03-23'),
(4, 10, 2, '2020-03-23'),
(5, 10, 1, '2020-03-23'),
(6, 10, 1, '2020-03-23'),
(7, 10, 1, '2020-03-23'),
(8, 10, 2, '2020-03-23'),
(9, 10, 1, '2020-03-23'),
(10, 10, 1, '2020-03-23'),
(11, 10, 2, '2020-03-23'),
(12, 11, 2, '2020-03-23'),
(23, 11, 1, '2020-03-23'),
(26, 11, 1, '2020-03-23'),
(27, 11, 2, '2020-03-23'),
(28, 11, 4, '2020-03-23'),
(29, 11, 2, '2020-03-23'),
(20, 11, 1, '2020-03-23'),
(32, 11, 1, '2020-03-23'),
(34, 11, 1, '2020-03-23'),
(35, 11, 1, '2020-03-23'),
(38, 11, 1, '2020-03-23'),
(39, 11, 1, '2020-03-23'),
(41, 11, 1, '2020-03-23'),
(43, 12, 2, '2020-03-23'),
(45, 12, 1, '2020-03-23'),
(47, 12, 4, '2020-01-23'),
(48, 12, 3, '2020-03-23'),
(50, 12, 1, '2020-03-23'),
(56, 12, 1, '2020-03-23'),
(55, 12, 1, '2020-03-23'),
(34, 12, 1, '2020-03-23'),
(58, 12, 1, '2020-03-23'),
(59, 12, 1, '2020-03-23'),
(60, 12, 1, '2020-03-23'),
(61, 12, 1, '2020-03-23'),
(64, 12, 1, '2020-03-23'),
(67, 12, 1, '2020-03-23'),
(68, 12, 2, '2020-03-23'),
(70, 12, 1, '2020-03-23'),
(71, 12, 2, '2020-03-23'),
(76, 12, 2, '2020-03-23'),
(79, 12, 1, '2020-03-23'),
(81, 12, 1, '2020-03-23'),
(84, 12, 1, '2020-03-23'),
(86, 12, 1, '2020-03-23'),
(87, 12, 1, '2020-03-23'),
(88, 12, 1, '2020-03-23'),
(89, 12, 1, '2020-03-23'),
(90, 12, 1, '2020-03-23'),
(91, 13, 2, '2020-03-23'),
(92, 13, 1, '2020-03-23'),
(93, 13, 1, '2020-03-23'),
(94, 13, 1, '2020-03-23'),
(95, 13, 2, '2020-03-23'),
(96, 13, 3, '2020-03-23'),
(97, 13, 1, '2020-03-23'),
(98, 13, 1, '2020-03-23'),
(99, 13, 1, '2020-03-23'),
(100, 13, 1, '2020-03-23'),
(111, 13, 2, '2020-03-23'),
(112, 13, 1, '2020-03-23'),
(113, 13, 1, '2020-03-23'),
(114, 13, 1, '2020-03-23'),
(115, 13, 1, '2020-03-23'),
(116, 13, 1, '2020-03-23'),
(117, 13, 2, '2020-03-23'),
(118, 13, 1, '2020-03-23'),
(119, 13, 1, '2020-03-23'),
(120, 13, 2, '2020-03-23'),
(20, 13, 1, '2020-03-23'),
(23, 13, 1, '2020-03-23'),
(22, 13, 2, '2020-03-23'),
(25, 13, 4, '2020-03-23'),
(19, 14, 1, '2020-03-23'),
(27, 14, 1, '2020-03-23'),
(11, 14, 2, '2020-03-23'),
(12, 14, 1, '2020-03-23'),
(13, 14, 1, '2020-03-23'),
(15, 14, 2, '2020-03-23'),
(16, 14, 2, '2020-03-23'),
(17, 14, 1, '2020-03-23'),
(18, 14, 1, '2020-03-23'),
(20, 14, 1, '2020-03-23'),
(21, 14, 2, '2020-03-23'),
(32, 14, 1, '2020-02-01'),
(33, 14, 1, '2020-02-01'),
(34, 15, 1, '2020-02-01'),
(35, 15, 3, '2020-02-01'),
(38, 15, 3, '2020-02-01'),
(39, 15, 3, '2020-02-01'),
(40, 15, 1, '2020-02-01'),
(42, 15, 2, '2020-02-01'),
(43, 15, 1,'2020-02-01'),
(47, 15, 1, '2020-02-01'),
(48, 15, 1, '2020-02-01'),
(49, 15, 1, '2020-02-01'),
(56, 15, 1, '2020-02-01'),
(65, 15, 1, '2020-02-01'),
(63, 15, 1, '2020-02-01'),
(60, 14, 1, '2020-02-01'),
(72, 14, 1, '2020-02-01'),
(74, 14, 1, '2020-02-01'),
(76, 14, 1, '2020-02-01'),
(78, 14, 1, '2020-02-01'),
(80, 14, 1, '2020-02-01'),
(82, 14, 2, '2020-02-01'),
(84, 14, 1, '2020-02-01'),
(86, 14, 2, '2020-02-01'),
(88, 14, 2, '2020-02-01'),
(90, 14, 1, '2020-02-01'),
(92, 14, 1, '2020-02-01'),
(93, 14, 1, '2020-02-01'),
(6, 13, 1, '2020-02-01'),
(7, 13, 1, '2020-02-01'),
(8, 13, 1, '2020-02-01'),
(9, 13, 1, '2020-02-01'),
(10, 13, 1, '2020-02-01'),
(11, 13, 2, '2020-02-01'),
(12, 13, 1, '2020-02-01'),
(14, 13, 1, '2020-02-01'),
(15, 13, 1, '2020-02-01'),
(16, 13, 2, '2020-02-01');

-- создаем таблицу личный кабинет покупателя
drop table if exists lk;
create table lk(
	id serial primary key,
	name varchar(100) not null,
	email varchar(100) unique,
	password_hash varchar(255) default null
);

-- заполняем таблицу покупателей
insert lk(name, email) values
('Петр', 'petr_0122@mail.ru'),
('Настя', 'nastya_ak@inbox.ru'),
('Евгения', 'ev.1988@inbox.ru'),
('Николай', 'nikola_22@yandex.ru'),
('Вадим', 'XXX-vad@mail.ru'),
('Тимур', '892411@bk.ru'),
('Жанна', 'zhanna.kireeva@mail.ru'),
('Мария', 'mariya_tt@yandex.ru'),
('Инна', '125_inna@bk.ru'),
('Любовь', 'lyaba_22.04.@mail.ru'),
('Игорь', 'igor_88bk@yandex.ru'),
('Петр', 'petya_44@mail.ru'),
('Настя', 'nast_mb@inbox.ru'),
('Евгения', 'eva-1988@inbox.ru'),
('Николай', 'niko_more@yandex.ru'),
('Вадим', 'vadim.ne@mail.ru'),
('Тимур', 'tim_175@bk.ru'),
('Жанна', 'zhanna_aa@mail.ru'),
('Мария', 'masha_t@yandex.ru'),
('Инна', 'inna_vk@bk.ru'),
('Любовь', 'luba-ll@mail.ru'),
('Игорь', 'igor_200498@yandex.ru'),
('Станислав', 'stas_2201@mail.ru'),
('Семен', 'seno_ak@inbox.ru'),
('Евгений', 'zheka-1988@inbox.ru'),
('Никa', 'nika_krasa@yandex.ru'),
('Ева', 'eva_ssk@mail.ru'),
('Тибальт', 'tib_892111@bk.ru'),
('Жанна', 'zhana.kir@mail.ru'),
('Мария', 'mar_aa@yandex.ru'),
('Инна', 'inna_qq@bk.ru'),
('Любовь', 'lyab_22.11.@mail.ru'),
('Игорь', 'igor_111@yandex.ru'),
('Жора', 'zhor_55@mail.ru'),
('Настя', 'na_maaa@inbox.ru'),
('Евгения', 'eva_2020@inbox.ru'),
('Николай', 'nik_mot@yandex.ru'),
('Вадим', 'vadim_000@mail.ru'),
('Тимур', '596593930@bk.ru'),
('Жанна', '0109864@mail.ru'),
('Мария', 'masha_wwwa@yandex.ru'),
('Инна', 'inna000111@bk.ru'),
('Любовь', 'lub_000sss@mail.ru'),
('Игорь', 'oidfd444@yandex.ru'),
('Павел', 'pavel_asq@mail.ru'),
('Надежа', 'nadya_ert@inbox.ru'),
('Евгения', 'evg.ek5@inbox.ru'),
('Ерофей', 'eroha_22@yandex.ru'),
('Иван', 'vano.111@mail.ru'),
('Толик', 'tolyan_765677@bk.ru'),
('Софья', 'sofa.iv@mail.ru'),
('Мария', '345356_tt@yandex.ru'),
('Инна', 'inna.pug@bk.ru'),
('Ася', 'asya.sl@mail.ru'),
('Артем', 'art_bb@yandex.ru'),
('Павел', '958945_pp@mail.ru'),
('Таисия', 'taya_555@inbox.ru'),
('Евгения', 'eva-1932@inbox.ru'),
('Николай', 'niko_111@yandex.ru'),
('Вадим', 'vam.430@mail.ru'),
('Тимур', 'tim_ber@bk.ru'),
('Зоя', 'zoyii_dd@mail.ru'),
('Мария', 'm7776_t@yandex.ru'),
('Инна', 'inna_990ss@bk.ru'),
('Любовь', 'luba.luba@mail.ru'),
('Игорь', 'igor.ww8@yandex.ru'),
('Станислав', '6775777ss@mail.ru'),
('Семен', 'semyen_ii@inbox.ru'),
('Евгений', 'zhekk-2088@inbox.ru'),
('Никa', 'nika_0000m@yandex.ru'),
('Ева', 'eva23434@mail.ru'),
('Тибальт', '111892111@bk.ru'),
('Жанна', 'zh.ttos@mail.ru'),
('Мария', 'mar_gfd7@yandex.ru'),
('Инна', 'inna_988g@bk.ru'),
('Любовь', 'l_22.33.@mail.ru'),
('Игорь', 'igor_093l@yandex.ru'),
('Жора', 'zh5332qq@mail.ru'),
('Настя', 'nmaag5@inbox.ru'),
('Евгения', 'eva_2010@inbox.ru'),
('Николай', 'nik.3211@yandex.ru'),
('Вадим', 'vadya_nn@mail.ru'),
('Тимур', '59644440@bk.ru'),
('Жанна', '0909864@mail.ru'),
('Мария', 'maria_gl@yandex.ru'),
('Инна', 'in_zz11@bk.ru'),
('Любовь', 'lubov.ff1@mail.ru'),
('Игорь', 'iiid444@yandex.ru');


-- создаем таблицу заказы покупателей
drop table if exists watch_orders;
create table watch_orders(
	id serial primary key,
	buyer_id bigint unsigned not null,
	model_id bigint unsigned not null,
	city_id bigint unsigned not null,
	quantity int default 1,
	created_at datetime default now(),
	foreign key(model_id) references watches(id),
	foreign key(buyer_id) references lk(id) ,
	foreign key(city_id) references city_address(id),
	index (created_at)
);

-- заполняем таблицу заказы покупателей
insert watch_orders(buyer_id, model_id, city_id, quantity, created_at) values
(1, 1, 1, 1, '2019-12-24'),
(1, 127, 4, 1, '2019-12-24'),
(2, 44, 8, 1, '2019-12-12'),
(3, 41, 12, 2, '2019-12-15'),
(4, 57, 15, 1, '2020-01-12'),
(5, 132, 1, 1, '2019-11-11'),
(5, 101, 4, 1, '2020-02-23'),
(6, 114, 8, 1, '2020-03-08'),
(7, 28, 12, 2, '2019-11-17'),
(8, 110, 15, 1, '2019-12-04'),
(9, 93, 1, 1, '2020-01-02'),
(10, 74, 4, 1, '2020-02-04'),
(11, 72, 8, 1, '2019-12-30'),
(15, 116, 12, 1, '2020-01-12'),
(15, 116, 15, 1, '2020-01-12'),
(16, 19, 1, 1, '2019-11-12'),
(17, 63, 4, 1, '2020-01-16'),
(18, 92, 8, 1, '2019-11-16'),
(19, 22, 12, 1, '2020-02-03'),
(20, 59, 15, 2, '2020-02-12'),
(21, 82, 2, 1, '2020-01-18'),
(22, 46, 5, 1, '2020-02-23'),
(23, 140, 9, 1, '2019-12-24'),
(23, 27, 13, 1, '2019-12-24'),
(24, 15, 14, 1, '2019-12-12'),
(25, 49, 2, 2, '2019-12-15'),
(26, 46, 5, 1, '2020-01-12'),
(27, 98, 9, 1, '2019-11-11'),
(27, 133, 13, 1, '2020-02-23'),
(28, 153, 14, 1, '2020-03-08'),
(29, 79, 2, 2, '2019-11-17'),
(30, 21, 5, 1, '2019-12-04'),
(31, 100, 9, 1, '2020-01-02'),
(32, 120, 13, 1, '2020-02-04'),
(33, 134, 14, 1, '2019-12-30'),
(34, 27, 3, 1, '2020-01-12'),
(34, 2, 4, 1, '2020-01-12'),
(35, 3, 6, 1, '2019-11-12'),
(36, 1, 7, 1, '2020-01-16'),
(37, 8, 3, 1, '2019-11-16'),
(37, 20, 4, 1, '2020-02-03'),
(38, 30, 6, 2, '2020-02-12'),
(39, 11, 7, 1, '2020-01-18'),
(40, 47, 3, 1, '2020-02-23'),
(41, 33, 4, 1, '2020-02-03'),
(42, 68, 6, 2, '2020-02-12'),
(43, 92, 7, 1, '2020-01-18'),
(44, 149, 3, 1, '2020-02-23'),
(44, 59, 3, 2, '2020-02-23');

/* создадим представление "распродажа" (столбцы: модель, брэнд,
категория, размер скидки, распродажная цена) где акция на скидки текущая*/
create or replace view sales as 
select w.name, b.brand_name, d.discount, 
(w.price - w.price * d.discount / 100) as discount_price 
from watches w
join discounts d on w.id = d.model_id 
join  brands b on w.brand_id = b.id 
where (d.finished_at is null or d.finished_at > now()) 
order by discount_price desc;

-- выведем представление sales 
select * from sales;

/* создадим предствление заказ последнего покупателя(корзину), 
 столбцы: модель, цена, кол-во, стоимость */
create or replace view buyer_order as 
select wo.buyer_id, w.name, w.price, wo.quantity, 
(w.price * wo.quantity) as order_cost
from watch_orders wo 
join watches w on w.id = wo.model_id  
where wo.buyer_id = LAST_INSERT_ID() ;

-- выведем представление byuer_order
select * from buyer_order;

/* создадим представление 'total' при оформлении последнего заказа
покупателя с последним buyer_id */
create or replace view total as 
select  
sum(w.price * wo.quantity) as total
from watch_orders wo 
join watches w on w.id = wo.model_id  
where wo.buyer_id = LAST_INSERT_ID() ;

-- выведем представление total последнего заказа
select * from total ;

/* создадим тригер который при обновлении таблицы stocks вставляет в таблицу discounts
 те модели часов, которых на остатке больше 3-х и срок хранения больше месяца
 */
drop trigger if exists discounts_update;
delimiter //
create trigger discounts_update after update on stocks 
for each row 
begin 
	insert ignore discounts(model_id) select model_id from stocks
	where (stocks.quantity >= 2 
	and (TO_DAYS(now()) - TO_DAYS(stocks.`date`)) >= 30);
end;//
delimiter ;

/* создадим триггер, который завершает акцию скидок т.е. присваивает полю 
finished_at текущую дату и время - now() при достижении условия, что кол-во моделей
часов распродажи уменьшается до "1" в таблице stocks
 */
drop trigger if exists discount_finish;
delimiter //
create trigger discount_finish after update on stocks
for each row 
begin 
	update discounts, stocks set finished_at = now() where 
	(discounts.model_id = stocks.model_id and stocks.quantity <= 1);
end;//
delimiter ;

-- триггер очистки таблицы discounts при обновлении таблицы stocks. 
-- триггер удаляет скидки завершенные с датой finished_at более 10 дней
drop trigger if exists clear_disc_table 
delimiter // 
create trigger clear_disc_table after update on stocks
for each row 
begin 
	delete from discounts where TO_DAYS(now()) - TO_DAYS(finished_at) >= 10;
end;//
delimiter ;

-- ////////////////////////////////////////////
-- запросы к таблицам
-- выведем продажи по магазинам за декабрь 2019
select wat.name, wat.price, wat.catalogs_id, wo.quantity, 
wo.city_id, wo.created_at
from watch_orders wo
join watches wat on wat.id = wo.model_id
where year(wo.created_at) = 2019 and month(wo.created_at) = 12;

-- выведем сумму заказов в городе Москва за февраль 2020 
select sum(wat.price) as 'сумма заказов в февр. 2020', 
cities.city_name as 'город' 
from watch_orders wo
join watches wat on wat.id = wo.model_id 
join city_address ci on ci.id = wo.city_id 
join cities on cities.id = ci.city_id 
where year(wo.created_at) = 2020 and month(wo.created_at) = 2
and wo.city_id = 3;

/* выведем сумму заказов в городе Ростове-на-Дону (id=13) за 
февраль 2020 с группировкой по категориям часов (муж, женс., детс.) */
select sum(wat.price) as 'сумма заказов Ростов за фев.2020', 
(CASE
	when wat.cat_id = 1 then 'мужские'
	when wat.cat_id = 2 then 'женские'
	else 'детские'
end) as 'категория'
from watch_orders wo
join watches wat on wat.id = wo.model_id 
where year(wo.created_at) = 2020 and month(wo.created_at) = 02 
and wo.city_id = 13
group by wat.cat_id;

/* выведем список моделей часов с ценой более 20 000 р которые были 
заказаны покупателями (поля: модель, страна, кол-во, цена, ручные или 
элитные (catalogs_id) с сортировкой от большей цены к меньшей*/
select wa.name as 'модель часов', c.country_name, wo.quantity, 
wa.price, wa.catalogs_id, wo.created_at 
from watch_orders wo 
join watches wa on wa.id = wo.model_id 
join country_of_origin c on c.id = wa.country_id 
where wa.price > 20000
order by wa.price desc;

/* выведем женские модели в наличии (с учетом таблицы stocks)
где цена до 100 000р с металлическим браслетом с сортировкой от 
большей цены к меньшей*/
select s.id, wa.name, wa.price, cit.city_name, s.quantity, 
	`as`.strap_name, wa.cat_id, s.`date`
from watches wa
join stocks s on s.model_id = wa.id 
join watch_strap `as` on `as`.id = wa.strap_id
join city_address ci on s.city_id = ci.id 
join cities cit on cit.id = ci.city_id 
where wa.strap_id = 1 and wa.cat_id = 2 and wa.price < 100000
order by wa.price desc;

-- выведем кол-во моделей женских часов в БД с группировкой по странам
select c.country_name, count(*) as total
from watches w
join country_of_origin c on c.id = w.country_id 
where cat_id = 2
group by country_id 
order by total desc;

-- выведем общие суммы заказов покупателей по городам за 2019г
select ci.city_name, sum(wa.price) as total
from watch_orders wo 
join watches wa on wa.id = wo.model_id 
join cities ci on ci.id = wo.city_id
where year(wo.created_at) = '2019' 
group by ci.city_name
order by total desc;

/* выведем позиции часов с действующей скидкой (модель, цена, размер скидки, 
цена со скидкой, дата начала скидки) */
select w.name, w.price, d.discount, 
(w.price  - w.price * d.discount / 100) as discount_price, 
d.started_at
from discounts d 
join watches w on w.id = d.model_id 
where d.finished_at is null
order by w.price desc;


-- /////// вопрос /////////
-- если сделать запрос заказ последнего покупателя, который учитывает 
-- есть ли текущая акция на скидку модели часов, то при заказе нескольких
-- позиций берет только последнее значение, почему???
select wo.buyer_id, w.name,
if (d.finished_at is null, 
(w.price - w.price * d.discount / 100), w.price ) as price,
wo.quantity, 
if (d.finished_at is null, 
(w.price - w.price * d.discount / 100)* wo.quantity , 
(w.price * wo.quantity)) as order_cost
from watch_orders wo 
join watches w on w.id = wo.model_id 
join discounts d on w.id = d.model_id 
where wo.buyer_id = LAST_INSERT_ID() ;











