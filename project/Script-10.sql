/* база данных на примере интернет-магазина www.alltime.ru
 для курсовой взяты не все разделы каталога магазина и не все
 фильтры. Взяты только разделы касательно часов.*/

drop database if exists alltime;
create database alltime;
use alltime;

-- создаем таблицу к разделам интернет магазина
drop table if exists catalogs;
create table catalogs(
	id serial primary key,
	name varchar(100)
);

-- вставляем названия разделов
insert catalogs(name) values
('наручные часы'),
('премиум часы'),
('украшения'),
('подарки'),
('аксессуары'),
('бренды'),
('личный кабинет'),
('корзина');

-- создаем таблицу города, где есть розничные точки интернет-магазина
drop table if exists cities;
create table cities(
	id serial primary key,
	city_name varchar(100),
);

-- заполняем таблицу городами
insert cities(city_name) values
('Москва'),
('Краснодар'),
('Казань'),
('Воронеж'),
('Челябинск'),
('Мурманск'),
('Нижний Новгород'),
('Екатеринбург'),
('Уфа'),
('Санкт-Петербург'),
('Новосибирск'),
('Самара'),
('Ростов-на-Дону');

-- создаем таблицу адреса магазинов
drop table if exists city_address;
create table city_address (
	id serial primary key,
	city_id bigint unsigned not null,
	address varchar(255),
	tel bigint not null,
	email varchar(50),
	foreign key(city_id) references cities(id)
);

-- заполняем таблицу с адресами магазинов
insert city_address(city_id, address, tel, email) values
(1, 'ул.Большая Дорогомиловская д.1', '84959026379', 'zakaz-shop@alltime.ru'),
(1, 'ул. Сретенка д.9', '84959026375', 'zakaz-kg@alltime.ru'),
(1, 'ул. Петровский Бульвар д.21', '84959025475', 'zakaz-gallery@alltime.ru'),
(2, 'ул. Чапаева д.90', '88612055455', 'zakaz-krr@alltime.ru'),
(3, 'ул. Пушкина д.3', '88432922314', 'zakaz-kzn@alltime.ru'),
(4, 'пр. Ркволюции д.53', '84732022140', 'zakaz-voronezh@alltime.ru'),
(5, 'пр. Ленина д.62', '83512149691', 'zakaz-chelyabinsk@alltime.ru'),
(6, 'пр. Ленина д.61', '88152624532', 'zakaz-mrk@alltime.ru'),
(7, 'ул. Большая Покровская д.61', '88314333878', 'zakaz-nn@alltime.ru'),
(8, 'ул. Свердлова д.11', '83432277057', 'zakaz-ekb@alltime.ru'),
(9, 'ул. 50-летия Октября д.18', '83472254777', 'zakaz-ufa@alltime.ru'),
(10, 'ул. Садова д.38', '88124263175', 'spbzakaz@alltime.ru'),
(11, 'Красный проспект д.78', '83832049350', 'zakaz-nsk@alltime.ru'),
(12, 'ул. Куйбышева д.100', '88462001668', 'zakaz-samara@alltime.ru'),
(13, 'ул. Большая Садовая д.89', '88633034375', 'rostov-zakaz@alltime.ru');

-- создаем вспомогательные таблицы моделей наручных часов
-- создаем таблицу категории наручных часов
drop table if exists watch_category;
create table watch_category(
	id serial primary key,
	cat_name varchar(100)
);

-- заполняем таблицу категорий
insert watch_category(cat_name) values
('мужские'),
('женские'),
('детские');

-- создаем таблицу стиль часов
drop table if exists watch_style;
create table watch_style(
	id serial primary key,
	style_name varchar(100)
);

-- заполняем таблицу стиль часов
insert watch_style(style_name) values
('Военные'),
('Дизайнерские'),
('Милитари'),
('На каждый день'),
('Пилотские'),
('Под костюм'),
('Спортивные');

-- создаем таблицу брэндов часов
drop table if exists brands;
create table brands(
	id serial primary key,
	brand_name varchar(100)
);

-- заполняем таблицу брэндами
insert brands(brand_name) values
('Orient'),
('Casio'),
('Emporio Armani'),
('Wainer'),
('Seiko'),
('Traser'),
('Sokolov'),
('G-Shock'),
('Fossil'),
('Epos'),
('Ball'),
('Слава'),
('Молния'),
('Wenger'),
('Swiss military'),
('TAG Hkuer'),
('Faimond weil'),
('Diesel'),
('Fesstina'),
('DKNY'),
('Citizen'),
('Calvin Klein'),
('Boccia Titanium'),
('Ben Sherman'),
('AM:PM'),
('Adriatica'),
('Bering'),
('Guess'),
('Jacques Lemans'),
('Lee Cooper'),
('Michael Kors'),
('Oris'),
('Pierre Rikaud'),
('Romanson'),
('Royal London'),
('Skagen'),
('Timberland'),
('Ника'),
('Победа'),
('Ракета'),
('Спецназ'),
('Штурманские');

-- создаем таблицу страна происхождения
drop table if exists country_of_origin;
create table country_of_origin(
	id serial primary key,
	country_name varchar(100)
);

-- заполняем таблицу странами
insert country_of_origin(country_name) values
('Швейцария'),
('Япония'),
('Россия'),
('Германия'),
('Австрия'),
('Беларусь'),
('Великобритания'),
('Гонконг'),
('Дания'),
('Испания'),
('Италия'),
('Канада'),
('Китай'),
('Нидерланды'),
('США'),
('Турция'),
('Финляндия'),
('Швеция'),
('Южная Корея');

-- создаем таблицу с типами механизма часов
drop table if exists mehanizm_type;
create table mehanizm_type(
	id serial primary key,
	name_of_meh varchar(100)
);

-- заполняем таблицу с типами механизма часов
insert mehanizm_type(name_of_meh) values
('механические'),
('с ручным заводом'),
('с автоподзоводом'),
('кварцевые'),
('солнечная батарея'),
('автокварц(кинетик)'),
('электронные');

-- создаем таблицу материал корпуса часов
drop table if exists watch_case;
create table watch_case(
	id serial primary key,
	case_name varchar(100)
);

-- заполняем таблицу материал корпуса часов
insert watch_case(case_name) values
('сталь'),
('металлический'),
('титан'),
('алюминий'),
('карбон'),
('пластик');

-- создаем  таблицу ремешков часов
drop table if exists watch_strap;
create table watch_strap(
	id serial primary key,
	strap_name varchar(100)
);

-- заполняем таблицу ремешков
insert watch_strap(strap_name) values
('металлический браслет'),
('ремешок из резины'),
('пластиковый ремешок'),
('ремешок каучуковый'),
('кожанный ремешок'),
('текстильный ремешок');

-- создаем основную таблицу с моделями часов наручных и премиум часов
drop table if exists watches;
create table watches(
	id serial primary key,
	name varchar(100) comment 'модель часов',
	price int,
	catalogs_id bigint unsigned,
	cat_id bigint unsigned,
	style_id bigint unsigned,
	brand_id bigint unsigned,
	country_id bigint unsigned,
	type_id bigint unsigned,
	case_id bigint unsigned,
	strap_id bigint unsigned,
	created_at datetime default now(),
	updated_at datetime default now() on update now(),
	foreign key(catalogs_id) references catalogs(id),
	foreign key(cat_id) references watch_category(id),
	foreign key(style_id) references watch_style(id),
	foreign key(brand_id) references brands(id),
	foreign key(country_id) references country_of_origin(id),
	foreign key(type_id) references mehanizm_type(id),
	foreign key(case_id) references watch_case(id),
	foreign key(strap_id) references watch_strap(id)
);

-- вставляем модели часов в таблицу watches
insert watches(name, price, catalogs_id, cat_id, style_id, brand_id, country_id, 
type_id, case_id, strap_id) values
('NY2342', 23000, 1, 1, 5, 36, 14, 5, 4, 6),
('NS44CHSP.0098.3', 17600, 1, 1, 3, 21, 3, 4, 3, 5),
('EFR-5541.022-3', 24300, 1, 2, 6, 34, 15, 5, 4, 6),
('SS-0021', 11200, 1, 2, 3, 23, 11, 3, 3, 3),
('AA-00219-F5', 8900, 1, 1, 5, 1, 12, 4, 5, 1),
('123.45-OO', 7600, 1, 2, 6, 22, 1, 4, 1, 1),
('K-09.SS', 28000, 1, 1, 3, 40, 9, 7, 3, 6),
('MDA -01-22', 15400, 1, 2, 7, 4, 16, 2, 2, 2),
('123.MN.005', 31000, 1, 2, 6, 7, 2, 5, 3, 6),
('QQ123.09-5', 11900, 1, 1, 1, 1, 1, 1, 3, 3),
('QWA-00931', 8600, 1, 2, 4, 36, 14, 6, 2, 1),
('126-65-AS', 7800, 1, 1, 2, 19, 2, 1, 2, 3),
('ZZZ-01-00001', 12400, 1, 2, 5, 3, 15, 1, 2, 6),
('qs/0002-xxc', 13700, 1, 2, 4, 20, 8, 7, 4, 4),
('khgk-8881', 20600, 1, 1, 2, 23, 4, 2, 6, 1),
('GAX-901200.0001', 19900, 1, 2, 4, 33, 13, 7, 2, 4),
('KJL-004111-09', 16700, 1, 2, 6, 38, 15, 5, 5, 5),
('DBN-9999-01', 14300, 1, 1, 3, 3, 2, 3, 3, 4),
('A-09-AS-01', 11800, 1, 2, 7, 25, 4, 5, 6, 6),
('STV-00984-OO', 16100, 1, 1, 3, 39, 14, 1, 2, 3),
('IK01-TTR-7', 8800, 1, 2, 6, 17, 4, 5, 2, 5),
('NZ-2311', 9300, 1, 1, 5, 33, 15, 5, 4, 6),
('N-44CHSP-0098', 12100, 1, 1, 2, 23, 3, 4, 3, 1),
('EF-5541-072-3', 15900, 1, 2, 6, 38, 7, 5, 4, 6),
('S-0022', 25900, 1, 2, 3, 1, 17, 1, 3, 3),
('AA-222-F4', 20100, 1, 1, 5, 34, 7, 4, 5, 1),
('005.45-OO', 22200, 1, 2, 7, 22, 8, 4, 1, 1),
('K-09.SA', 19890, 1, 1, 3, 16, 10, 6, 3, 6),
('MD -01-22', 12940, 1, 1, 6, 33, 2, 2, 2, 2),
('128.MN.005', 3990, 1, 3, 6, 7, 2, 5, 3, 6),
('Q-123.09-5', 5600, 1, 3, 1, 1, 1, 1, 3, 3),
('QW-0093122', 4900, 1, 3, 4, 36, 14, 6, 2, 1),
('12-65-AS', 8100, 1, 1, 3, 14, 2, 1, 2, 3),
('ZZ-01-00001', 10200, 1, 2, 6, 3, 15, 1, 2, 6),
('qs-002-xxa', 28300, 1, 2, 3, 12, 3, 7, 4, 4),
('khaak-8881', 18000, 1, 1, 2, 24, 4, 2, 6, 1),
('GAX-901200', 16000, 1, 1, 4, 36, 11, 7, 2, 4),
('KJ-004111-09', 23200, 1, 2, 6, 21, 15, 5, 5, 5),
('DBN-9999-045', 18500, 1, 1, 3, 13, 2, 3, 3, 4),
('A234-AS-01', 10390, 1, 2, 4, 22, 14, 5, 6, 3),
('ST-00984-OO-01', 24600, 1, 1, 3, 40, 8, 6, 5, 3),
('IK-TTR-7', 6500, 1, 3, 6, 16, 6, 5, 2, 5),
('MY239-1', 9000, 1, 1, 3, 28, 17, 4, 4, 4),
('MS44DDHSP-6', 15900, 1, 1, 6, 9, 6, 3, 4, 3),
('AFR-5541.066', 28300, 1, 2, 6, 30, 15, 5, 4, 6),
('SSXX-002122', 24900, 1, 1, 3, 5, 10, 3, 3, 3),
('AALM-00219-DD5', 14000, 1, 1, 6, 19, 7, 4, 5, 1),
('LL-123.45', 32000, 1, 2, 5, 19, 4, 4, 2, 1),
('KLLM-09.ZZA', 26000, 1, 1, 3, 38, 9, 6, 6, 6),
('MD123-01-22', 28900, 1, 2, 7, 24, 3, 3, 2, 2),
('128.MKL.005', 19000, 1, 2, 5, 6, 12, 5, 3, 6),
('QQLMSS-0010', 5400, 1, 3, 1, 11, 11, 3, 3, 3),
('PPWA-00931', 15200, 1, 2, 5, 37, 16, 6, 2, 1),
('AB126-65', 12800, 1, 1, 2, 20, 12, 1, 2, 3),
('ZQQ-01-00012', 13200, 1, 2, 4, 13, 5, 1, 2, 6),
('qs-0112-axc', 16400, 1, 2, 5, 21, 1, 7, 4, 4),
('LLL-888.5555', 21000, 1, 1, 6, 2, 7, 2, 6, 6),
('GX-900.0001', 26000, 1, 2, 5, 31, 1, 7, 2, 4),
('JL-4111-109', 24200, 1, 1, 6, 22, 5, 5, 5, 5),
('N-199-11', 20900, 1, 1, 3, 23, 2, 3, 3, 4),
('A-AS-201', 18500, 1, 2, 1, 24, 11, 6, 6, 6),
('V-11984-OO', 6100, 1, 3, 3, 30, 4, 7, 2, 3),
('II01-TR-2', 8600, 1, 2, 6, 1, 14, 4, 2, 5),
('YY2342', 27700, 1, 2, 5, 27, 3, 6, 4, 6),
('44-CHSP.983', 23000, 1, 1, 5, 8, 13, 4, 4, 5),
('R-5545-2-3', 24600, 1, 2, 5, 4, 8, 5, 4, 6),
('TS-021', 20800, 1, 2, 3, 24, 15, 4, 3, 3),
('F-00219-5', 14100, 1, 1, 5, 11, 2, 4, 5, 1),
('JKO-45-OO', 12500, 1, 2, 6, 2, 1, 4, 1, 1),
('KM-012.SS', 15600, 1, 1, 3, 37, 9, 5, 3, 6),
('MD-021-28', 9900, 1, 2, 6, 14, 17, 2, 2, 2),
('XZ-015', 25200, 1, 2, 6, 17, 3, 5, 3, 6),
('Q-13.19-S5', 29000, 1,  1, 1, 11, 11, 1, 3, 3),
('QW-Z0091', 25100, 1, 2, 4, 6, 14, 6, 2, 1),
('fkjfk-65-AS', 15900, 1, 1, 2, 9, 2, 2, 2, 3),
('VCB-1-1001', 9200, 1, 2, 5, 24, 7, 1, 2, 6),
('qs-00.02-9', 8200, 1, 2, 4, 10, 9, 7, 4, 4),
('kk-881-oop', 7800, 1, 1, 2, 4, 9, 2, 5, 5),
('X-601204', 6950, 1, 3, 7, 3, 3, 7, 2, 4),
('JL-004122', 10000, 1, 2, 6, 8, 15, 6, 5, 5),
('WQBN-8899-01', 9900, 1, 1, 3, 23, 12, 3, 3, 4),
('ASR-10-AS-01', 14800, 1, 2, 7, 24, 14, 5, 6, 6),
('STAA-084-OA', 29300, 1, 1, 3, 36, 8, 6, 2, 3),
('I-101-R-765', 22000, 1, 2, 6, 16, 1, 4, 2, 5),
('N-2311.op', 12900, 1, 1, 5, 3, 8, 6, 6, 6),
('N-46SP-98', 15700, 1, 1, 5, 28, 13, 4, 3, 1),
('5541-072-3', 17000, 1, 2, 6, 37, 7, 4, 4, 6),
('S-02-LL', 15600, 1, 2, 3, 11, 18, 1, 3, 3),
('AA-333-F4', 17800, 1, 1, 3, 34, 7, 4, 4, 3),
('005.5-GJHOO', 10500, 1, 2, 7, 2, 9, 4, 1, 3),
('AS-11.SA', 13500, 1, 1, 3, 16, 10, 3, 3, 4),
('TRAC-01-52', 8800, 1, 1, 6, 33, 2, 2, 2, 3),
('18.VC.005', 4300, 1, 3, 5, 40, 5, 6, 3, 6),
('AXQ-13.09', 6900, 1, 3, 3, 3, 3, 3, 3, 3),
('W-0031522', 8100, 1, 3, 4, 27, 12, 6, 2, 1),
('HG-12-65-S', 16300, 1, 1, 3, 13, 4, 4, 2, 3),
('AVC-01-04001', 15200, 1, 2, 4, 33, 14, 4, 4, 4),
('gfs-002-xa', 14000, 1, 2, 3, 6, 18, 6, 5, 4),
('khe-83e81', 14300, 1, 1, 2, 25, 14, 2, 5, 2),
('X-q001200', 15200, 1, 1, 4, 36, 16, 3, 2, 4),
('JJJ-0041-09', 15600, 1, 2, 6, 20, 17, 5, 5, 5),
('DNMB-77799-045', 16900, 1, 1, 4, 14, 12, 3, 3, 4),
('AFG234-AS-01', 17300, 1, 2, 4, 26, 4, 5, 4, 3),
('STRT-11984-OO', 18000, 1, 1, 3, 39, 17, 2, 5, 3),
('IK-R-72S', 5000, 1, 3, 6, 16, 5, 5, 4, 5),
('LJH-239-102', 7800, 1, 1, 3, 26, 7, 3, 3, 3),
('DDHSP-61123', 9000, 1, 1, 5, 29, 16, 7, 4, 3),
('RFD-2541.066', 18700, 1, 2, 6, 30, 14, 4, 2, 6),
('SXZ-012122', 12000, 1, 1, 3, 15, 9, 3, 5, 3),
('AAM-05519-D5', 10100, 1, 1, 5, 18, 6, 4, 5, 3),
('LWREQ-123.45', 9900, 1, 2, 5, 13, 14, 4, 2, 2),
('KL45-12.Z', 30000, 1, 1, 3, 28, 13, 1, 6, 6),
('MCVD-123-01-SSA', 31000, 1, 2, 7, 25, 13, 3, 2, 2),
('228.MKL-0091', 20700, 1, 2, 5, 6, 11, 5, 3, 6),
('QLMSS-ZX-10', 7000, 1, 3, 1, 11, 15, 2, 2, 3),
('PA-031-SS', 28000, 1, 2, 5, 27, 14, 6, 2, 2),
('126-65-QWERT', 24000, 1, 1, 2, 10, 10, 5, 2, 3),
('ZRQ-1111-00012', 24400, 1, 2, 4, 13, 5, 1, 2, 6),
('QSD-312-xxc', 22000, 1, 2, 5, 19, 11, 4, 4, 4),
('LSDTY-88', 21000, 1, 1, 6, 2, 7, 2, 5, 6),
('G0-111-0001', 23000, 1, 2, 3, 33, 4, 5, 2, 4),
('JL-uu11-pyu', 13700, 1, 1, 4, 2, 5, 4, 5, 5),
('NYT-139-zz', 12000, 1, 1, 5, 34, 6, 5, 3, 4),
('ARE-AS-202', 12400, 1, 2, 1, 26, 13, 5, 6, 6),
('VSW-11984', 5400, 1, 3, 3, 20, 3, 3, 2, 3),
('I01-TRFF-2', 9000, 1, 2, 6, 11, 14, 5, 2, 5),
('PRY1242', 103000, 2, 1, 6, 36, 1, 3, 3, 5),
('PS44CHSP-00102', 176000, 2, 2, 6, 21, 1, 3, 3, 1),
('PREFR-5588-022-3', 243000, 2, 2, 6, 34, 5, 3, 3, 1),
('PSS-1121', 212000, 2, 2, 3, 23, 1, 3, 3, 5),
('PRA-11219-F', 389000, 2, 1, 6, 5, 5, 3, 3, 1),
('P823.555-OO', 276000, 2, 2, 6, 22, 1, 3, 3, 1),
('PRK-109.SS', 280000, 2, 1, 6, 40, 5, 3, 3, 5),
('PMD-S01-22', 254000, 2, 2, 6, 4, 1, 3, 3, 5),
('PRS623-005', 310000, 2, 2, 6, 7, 5, 3, 3, 1),
('PQ1023.S09', 119000, 2, 1, 7, 16, 5, 3, 3, 3),
('PRQA-AA936', 186000, 2, 2, 6, 36, 1, 3, 3, 1),
('PA6-SS65-S', 278000, 2, 1, 6, 19, 5, 3, 3, 1),
('PRZ-QQ1-201', 154000, 2, 2, 6, 3, 5, 3, 3, 5),
('pqs006-zzz', 187000, 2, 2, 6, 20, 1, 3, 3, 1),
('prl-2280', 206000, 2, 1, 6, 23, 1, 3, 6, 1),
('PA-PA20', 199000, 2, 2, 6, 33, 1, 7, 2, 4),
('PRJL-2111-PP', 167000, 2, 2, 6, 38, 5, 5, 5, 5),
('PBN-DD99-04', 143000, 2, 1, 3, 3, 2, 3, 3, 4),
('PRA-AA09-AS', 218000, 2, 2, 6, 25, 5, 5, 6, 6),
('PSV-LL984', 261000, 2, 1, 3, 39, 14, 1, 2, 3),
('PRIK-11TTR', 388000, 2, 2, 6, 17, 1, 5, 2, 5),
('PNZ-OO11', 293000, 2, 1, 4, 33, 15, 5, 4, 6),
('PNN-CHSP-2298', 191000, 2, 1, 2, 23, 3, 4, 3, 1),
('PRE-PP55-07', 159000, 2, 2, 6, 38, 7, 5, 4, 6),
('PS-HH-02', 259000, 2, 2, 3, 1, 18, 1, 3, 3),
('PPA-522-F8', 201000, 2, 1, 5, 34, 7, 4, 5, 1),
('PR5.55-QQ', 222000, 2, 2, 7, 30, 8, 4, 1, 1),
('POK-109.S09', 198900, 2, 1, 3, 16, 10, 6, 3, 6),
('PRMD -TT01', 199400, 2, 1, 6, 33, 2, 2, 2, 2),
('PR8.NNN.105', 399000, 2, 3, 6, 7, 2, 5, 3, 6),
('PJQ-3333.05', 406000, 2, 3, 1, 1, 1, 1, 3, 3),
('PQW-3122-III', 349000, 2, 3, 4, 26, 14, 6, 2, 1);

-- создаем таблицу скидки
drop table if exists discounts;
create table discounts(
	id serial primary key,
	model_id bigint unsigned,
	discount int comment 'размер скидки %',
	started_at datetime default now() comment 'начало 
	действия скидки',
	finished_at datetime default null comment 'завершение акции скидок',
	foreign key(model_id) references watches(id)
);

-- заполняем таблицу discounts
insert discounts (model_id, discount, started_at, finished_at) values
(159, 20, '2020-03-06', null),
(163, 15, '2020-03-06', null),
(174, 15, '2020-03-05', '2020-03-15'),
(179, 23, '2020-03-06', null),
(184, 20, '2020-02-07', '2020-03-15'),
(189, 25, '2020-03-15', null),
(194, 15, '2020-01-30', '2020-02-28'),
(198, 15, '2020-01-30', '2020-02-28'),
(204, 15, '2020-01-30', '2020-02-28'),
(208, 15, '2020-01-30', '2020-02-28'),
(216, 25, '2020-03-15', null),
(224, 25, '2020-03-15', null),
(229, 25, '2020-03-15', null),
(234, 25, '2020-03-15', null),
(239, 20, '2020-02-07', '2020-03-15'),
(246, 20, '2020-02-07', '2020-03-15'),
(254, 20, '2020-02-07', '2020-03-15'),
(258, 20, '2020-02-07', '2020-03-15');


-- создаем таблицу наличие товара в магазинах
drop table if exists stocks;
create table stocks(
	id serial primary key,
	model_id bigint unsigned not null,
	city_id bigint unsigned, 
	quantity int,
	`date` datetime default now(),
	foreign key(model_id) references watches(id),
	foreign key(city_id) references city_address(id)
);

-- заполняем таблицу наличие товара в магазинах
insert stocks(model_id, city_id, quantity) values
(159, 1, 2),
(160, 1, 1),
(161, 1, 1),
(162, 1, 1),
(163, 1, 2),
(164, 1, 1),
(165, 1, 1),
(166, 1, 1),
(167, 1, 1),
(168, 1, 1),
(169, 1, 2),
(170, 1, 1),
(171, 1, 1),
(172, 1, 1),
(173, 1, 1),
(179, 1, 1),
(184, 1, 2),
(185, 1, 1),
(188, 1, 1),
(199, 1, 2),
(200, 1, 1),
(201, 1, 1),
(203, 1, 2),
(205, 1, 1),
(206, 1, 1),
(207, 1, 1),
(211, 1, 2),
(212, 2, 1),
(212, 2, 1),
(213, 2, 2),
(214, 2, 2),
(215, 2, 1),
(216, 2, 1),
(217, 2, 2),
(218, 2, 1),
(219, 2, 2),
(220, 2, 1),
(222, 2, 1),
(224, 2, 1),
(225, 2, 1),
(228, 2, 1),
(229, 2, 1),
(231, 2, 1),
(233, 2, 2),
(235, 2, 1),
(237, 2, 1),
(238, 2, 1),
(240, 2, 1),
(316, 2, 1),
(315, 2, 1),
(314, 2, 1),
(288, 3, 1),
(289, 3, 1),
(290, 3, 1),
(291, 3, 1),
(294, 3, 1),
(297, 3, 1),
(298, 3, 2),
(300, 3, 1),
(167, 3, 2),
(186, 3, 2),
(199, 3, 1),
(201, 3, 1),
(204, 3, 1),
(206, 3, 1),
(207, 3, 1),
(208, 3, 1),
(209, 3, 1),
(219, 3, 1),
(159, 4, 2),
(160, 4, 1),
(161, 4, 1),
(162, 4, 1),
(163, 4, 2),
(164, 4, 1),
(165, 4, 1),
(166, 4, 1),
(167, 4, 1),
(168, 4, 1),
(169, 4, 2),
(170, 4, 1),
(171, 4, 1),
(172, 4, 1),
(173, 4, 1),
(179, 4, 1),
(184, 4, 2),
(185, 4, 1),
(188, 4, 1),
(199, 4, 2),
(200, 4, 1),
(201, 4, 1),
(203, 4, 2),
(205, 4, 1),
(206, 5, 1),
(207, 5, 1),
(211, 5, 2),
(212, 5, 1),
(212, 5, 1),
(213, 5, 2),
(214, 5, 2),
(215, 5, 1),
(216, 5, 1),
(217, 5, 2),
(218, 5, 1),
(219, 5, 2),
(220, 5, 1),
(222, 5, 1),
(224, 5, 1),
(225, 5, 1),
(228, 5, 1),
(229, 5, 1),
(231, 5, 1),
(233, 6, 2),
(235, 6, 1),
(237, 6, 1),
(238, 6, 1),
(240, 6, 1),
(316, 6, 1),
(315, 6, 1),
(314, 6, 1),
(288, 6, 1),
(289, 6, 1),
(290, 6, 1),
(291, 6, 1),
(294, 6, 1),
(297, 6, 1),
(298, 6, 2),
(300, 6, 1),
(167, 6, 2),
(186, 6, 2),
(199, 6, 1),
(201, 6, 1),
(204, 6, 1),
(206, 6, 1),
(207, 6, 1),
(208, 6, 1),
(209, 6, 1),
(219, 6, 1),
(159, 7, 2),
(160, 7, 1),
(161, 7, 1),
(162, 7, 1),
(163, 7, 2),
(164, 7, 1),
(165, 7, 1),
(166, 7, 1),
(167, 7, 1),
(168, 7, 1),
(169, 7, 2),
(170, 7, 1),
(171, 7, 1),
(172, 7, 1),
(173, 7, 1),
(179, 7, 1),
(184, 7, 2),
(185, 7, 1),
(188, 7, 1),
(199, 7, 2),
(200, 7, 1),
(201, 7, 1),
(203, 7, 2),
(205, 7, 1),
(206, 7, 1),
(207, 7, 1),
(211, 7, 2),
(212, 8, 1),
(212, 8, 1),
(213, 8, 2),
(214, 8, 2),
(215, 8, 1),
(216, 8, 1),
(217, 8, 2),
(218, 8, 1),
(219, 8, 2),
(220, 8, 1),
(222, 8, 1),
(224, 8, 1),
(225, 8, 1),
(228, 8, 1),
(229, 8, 1),
(231, 8, 1),
(233, 8, 2),
(235, 8, 1),
(237, 8, 1),
(238, 8, 1),
(240, 8, 1),
(316, 8, 1),
(315, 8, 1),
(314, 8, 1),
(288, 9, 1),
(289, 9, 1),
(290, 9, 1),
(291, 9, 1),
(294, 9, 1),
(297, 9, 1),
(298, 9, 2),
(300, 9, 1),
(167, 9, 2),
(186, 9, 2),
(199, 9, 1),
(201, 9, 1),
(204, 9, 1),
(206, 9, 1),
(207, 9, 1),
(208, 9, 1),
(209, 9, 1),
(219, 9, 1),
(159, 10, 2),
(160, 10, 1),
(161, 10, 1),
(162, 10, 1),
(163, 10, 2),
(164, 10, 1),
(165, 10, 1),
(166, 10, 1),
(167, 10, 1),
(168, 10, 1),
(169, 10, 2),
(170, 10, 1),
(171, 10, 1),
(172, 10, 1),
(173, 10, 1),
(179, 10, 1),
(184, 10, 2),
(185, 10, 1),
(188, 10, 1),
(199, 10, 2),
(200, 10, 1),
(201, 10, 1),
(203, 10, 2),
(205, 10, 1),
(206, 10, 1),
(207, 10, 1),
(211, 10, 2),
(212, 10, 1),
(212, 10, 1),
(213, 10, 2),
(214, 11, 2),
(215, 11, 1),
(216, 11, 1),
(217, 11, 2),
(218, 11, 1),
(219, 11, 2),
(220, 11, 1),
(222, 11, 1),
(224, 11, 1),
(225, 11, 1),
(228, 11, 1),
(229, 11, 1),
(231, 11, 1),
(233, 12, 2),
(235, 12, 1),
(237, 12, 1),
(238, 12, 1),
(240, 12, 1),
(316, 12, 1),
(315, 12, 1),
(314, 12, 1),
(288, 12, 1),
(289, 12, 1),
(290, 12, 1),
(291, 12, 1),
(294, 12, 1),
(297, 12, 1),
(298, 12, 2),
(300, 12, 1),
(167, 12, 2),
(186, 12, 2),
(199, 12, 1),
(201, 12, 1),
(204, 12, 1),
(206, 12, 1),
(207, 12, 1),
(208, 12, 1),
(209, 12, 1),
(219, 12, 1),
(160, 13, 2),
(161, 13, 1),
(162, 13, 1),
(164, 13, 1),
(173, 13, 2),
(174, 13, 1),
(175, 13, 1),
(176, 13, 1),
(177, 13, 1),
(178, 13, 1),
(179, 13, 2),
(180, 13, 1),
(181, 13, 1),
(182, 13, 1),
(183, 13, 1),
(189, 13, 1),
(194, 13, 2),
(195, 13, 1),
(198, 13, 1),
(200, 13, 2),
(201, 13, 1),
(203, 13, 1),
(213, 13, 2),
(215, 13, 1),
(196, 14, 1),
(207, 14, 1),
(211, 14, 2),
(212, 14, 1),
(213, 14, 1),
(215, 14, 2),
(216, 14, 2),
(217, 14, 1),
(218, 14, 1),
(219, 14, 2),
(220, 14, 1),
(221, 14, 2),
(222, 14, 1),
(223, 14, 1),
(224, 15, 1),
(225, 15, 1),
(228, 15, 1),
(229, 15, 1),
(230, 15, 1),
(232, 15, 2),
(233, 15, 1),
(237, 15, 1),
(238, 15, 1),
(239, 15, 1),
(316, 15, 1),
(315, 15, 1),
(313, 15, 1),
(160, 14, 1),
(162, 14, 1),
(164, 14, 1),
(166, 14, 1),
(168, 14, 1),
(170, 14, 1),
(172, 14, 2),
(174, 14, 1),
(176, 14, 2),
(178, 14, 2),
(180, 14, 1),
(182, 14, 1),
(183, 14, 1),
(236, 13, 1),
(237, 13, 1),
(238, 13, 1),
(239, 13, 1),
(240, 13, 1),
(241, 13, 2),
(242, 13, 1),
(244, 13, 1),
(245, 13, 1),
(246, 13, 2);

-- создаем таблицу личный кабинет покупателя
drop table if exists lk;
create table lk(
	id serial primary key,
	name varchar(100) not null,
	email varchar(100) unique,
	password_hash varchar(255) default null
);

-- заполняем таблицу покупателей
insert lk(name, email) values
('Петр', 'petr_0122@mail.ru'),
('Настя', 'nastya_ak@inbox.ru'),
('Евгения', 'ev.1988@inbox.ru'),
('Николай', 'nikola_22@yandex.ru'),
('Вадим', 'XXX-vad@mail.ru'),
('Тимур', '892411@bk.ru'),
('Жанна', 'zhanna.kireeva@mail.ru'),
('Мария', 'mariya_tt@yandex.ru'),
('Инна', '125_inna@bk.ru'),
('Любовь', 'lyaba_22.04.@mail.ru'),
('Игорь', 'igor_88bk@yandex.ru'),
('Петр', 'petya_44@mail.ru'),
('Настя', 'nast_mb@inbox.ru'),
('Евгения', 'eva-1988@inbox.ru'),
('Николай', 'niko_more@yandex.ru'),
('Вадим', 'vadim.ne@mail.ru'),
('Тимур', 'tim_175@bk.ru'),
('Жанна', 'zhanna_aa@mail.ru'),
('Мария', 'masha_t@yandex.ru'),
('Инна', 'inna_vk@bk.ru'),
('Любовь', 'luba-ll@mail.ru'),
('Игорь', 'igor_200498@yandex.ru'),
('Станислав', 'stas_2201@mail.ru'),
('Семен', 'seno_ak@inbox.ru'),
('Евгений', 'zheka-1988@inbox.ru'),
('Никa', 'nika_krasa@yandex.ru'),
('Ева', 'eva_ssk@mail.ru'),
('Тибальт', 'tib_892111@bk.ru'),
('Жанна', 'zhana.kir@mail.ru'),
('Мария', 'mar_aa@yandex.ru'),
('Инна', 'inna_qq@bk.ru'),
('Любовь', 'lyab_22.11.@mail.ru'),
('Игорь', 'igor_111@yandex.ru'),
('Жора', 'zhor_55@mail.ru'),
('Настя', 'na_maaa@inbox.ru'),
('Евгения', 'eva_2020@inbox.ru'),
('Николай', 'nik_mot@yandex.ru'),
('Вадим', 'vadim_000@mail.ru'),
('Тимур', '596593930@bk.ru'),
('Жанна', '0109864@mail.ru'),
('Мария', 'masha_wwwa@yandex.ru'),
('Инна', 'inna000111@bk.ru'),
('Любовь', 'lub_000sss@mail.ru'),
('Игорь', 'oidfd444@yandex.ru'),
('Павел', 'pavel_asq@mail.ru'),
('Надежа', 'nadya_ert@inbox.ru'),
('Евгения', 'evg.ek5@inbox.ru'),
('Ерофей', 'eroha_22@yandex.ru'),
('Иван', 'vano.111@mail.ru'),
('Толик', 'tolyan_765677@bk.ru'),
('Софья', 'sofa.iv@mail.ru'),
('Мария', '345356_tt@yandex.ru'),
('Инна', 'inna.pug@bk.ru'),
('Ася', 'asya.sl@mail.ru'),
('Артем', 'art_bb@yandex.ru'),
('Павел', '958945_pp@mail.ru'),
('Таисия', 'taya_555@inbox.ru'),
('Евгения', 'eva-1932@inbox.ru'),
('Николай', 'niko_111@yandex.ru'),
('Вадим', 'vam.430@mail.ru'),
('Тимур', 'tim_ber@bk.ru'),
('Зоя', 'zoyii_dd@mail.ru'),
('Мария', 'm7776_t@yandex.ru'),
('Инна', 'inna_990ss@bk.ru'),
('Любовь', 'luba.luba@mail.ru'),
('Игорь', 'igor.ww8@yandex.ru'),
('Станислав', '6775777ss@mail.ru'),
('Семен', 'semyen_ii@inbox.ru'),
('Евгений', 'zhekk-2088@inbox.ru'),
('Никa', 'nika_0000m@yandex.ru'),
('Ева', 'eva23434@mail.ru'),
('Тибальт', '111892111@bk.ru'),
('Жанна', 'zh.ttos@mail.ru'),
('Мария', 'mar_gfd7@yandex.ru'),
('Инна', 'inna_988g@bk.ru'),
('Любовь', 'l_22.33.@mail.ru'),
('Игорь', 'igor_093l@yandex.ru'),
('Жора', 'zh5332qq@mail.ru'),
('Настя', 'nmaag5@inbox.ru'),
('Евгения', 'eva_2010@inbox.ru'),
('Николай', 'nik.3211@yandex.ru'),
('Вадим', 'vadya_nn@mail.ru'),
('Тимур', '59644440@bk.ru'),
('Жанна', '0909864@mail.ru'),
('Мария', 'maria_gl@yandex.ru'),
('Инна', 'in_zz11@bk.ru'),
('Любовь', 'lubov.ff1@mail.ru'),
('Игорь', 'iiid444@yandex.ru');


-- создаем таблицу заказы покупателей
drop table if exists watch_orders;
create table watch_orders(
	id serial primary key,
	buyer_id bigint unsigned not null,
	model_id bigint unsigned not null,
	city_id bigint unsigned not null,
	quantity int default 1,
	created_at datetime default now(),
	foreign key(model_id) references watches(id),
	foreign key(buyer_id) references lk(id) ,
	foreign key(city_id) references city_address(id)
);

-- заполняем таблицу заказы покупателей
insert watch_orders(buyer_id, model_id, city_id, quantity, created_at) values
(1, 169, 1, 1, '2019-12-24'),
(1, 183, 4, 1, '2019-12-24'),
(2, 213, 8, 1, '2019-12-12'),
(3, 188, 12, 2, '2019-12-15'),
(4, 245, 15, 1, '2020-01-12'),
(5, 199, 1, 1, '2019-11-11'),
(5, 232, 4, 1, '2020-02-23'),
(6, 174, 8, 1, '2020-03-08'),
(7, 288, 12, 2, '2019-11-17'),
(8, 210, 15, 1, '2019-12-04'),
(9, 203, 1, 1, '2020-01-02'),
(10, 174, 4, 1, '2020-02-04'),
(11, 172, 8, 1, '2019-12-30'),
(15, 216, 12, 1, '2020-01-12'),
(15, 216, 15, 1, '2020-01-12'),
(16, 219, 1, 1, '2019-11-12'),
(17, 213, 4, 1, '2020-01-16'),
(18, 192, 8, 1, '2019-11-16'),
(19, 222, 12, 1, '2020-02-03'),
(20, 159, 15, 2, '2020-02-12'),
(21, 162, 2, 1, '2020-01-18'),
(22, 246, 5, 1, '2020-02-23'),
(23, 170, 9, 1, '2019-12-24'),
(23, 187, 13, 1, '2019-12-24'),
(24, 215, 14, 1, '2019-12-12'),
(25, 189, 2, 2, '2019-12-15'),
(26, 246, 5, 1, '2020-01-12'),
(27, 198, 9, 1, '2019-11-11'),
(27, 233, 13, 1, '2020-02-23'),
(28, 173, 14, 1, '2020-03-08'),
(29, 289, 2, 2, '2019-11-17'),
(30, 211, 5, 1, '2019-12-04'),
(31, 200, 9, 1, '2020-01-02'),
(32, 170, 13, 1, '2020-02-04'),
(33, 174, 14, 1, '2019-12-30'),
(34, 217, 3, 1, '2020-01-12'),
(34, 217, 4, 1, '2020-01-12'),
(35, 223, 6, 1, '2019-11-12'),
(36, 211, 7, 1, '2020-01-16'),
(37, 198, 3, 1, '2019-11-16'),
(37, 282, 4, 1, '2020-02-03'),
(38, 160, 6, 2, '2020-02-12'),
(39, 161, 7, 1, '2020-01-18'),
(40, 247, 3, 1, '2020-02-23'),
(41, 283, 4, 1, '2020-02-03'),
(42, 168, 6, 2, '2020-02-12'),
(43, 192, 7, 1, '2020-01-18'),
(44, 249, 3, 1, '2020-02-23');


-- ////////////////////////////////////////////
-- запросы к таблицам






























